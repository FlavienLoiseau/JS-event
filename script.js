// Fonctionnalit√© 1 :
// On commence par un petit √©chauffement : lorsque l'utilisateur va cliquer sur le footer (portant le tag <footer>), tu vas afficher le mot "clique" en console.
// Cette fonctionnalit√© doit √™tre cod√©e avec un addEventListener("click", function(){ } car c'est une bonne habitude √† prendre ! üòá
{
  let footer = document.getElementsByTagName("footer")
  let onFooterClick = function() {
    console.log("clique");
  };
  footer[0].addEventListener("click", onFooterClick); 
}
// Fonctionnalit√© 1-bis :
// Maintenant on va upgrader cette premi√®re fonctionnalit√© : lorsque l'utilisateur va cliquer sur le footer, tu vas afficher en console "clic num√©ro x" avec x qui commence √† 1 et s'incr√©mente de +1 √† chaque clic.
{
  let num = 0
  let footer = document.getElementsByTagName("footer")
  let onFooterClick = function() {
    console.log("clic num√©ro " + num);
    num += 1
  };
  footer[0].addEventListener("click", onFooterClick);
}
// Fonctionnalit√© 2 :
// On va enfin faire fonctionner ce satan√© "Hamburger Menu" qui s'affiche depuis le d√©but mais qui n'actionne rien quand on clique dessus. C'est quoi un "hamburger menu" ? C'est √ßa, ce bouton avec trois lignes horizontales en haut √† droite de la navbar.
// Tu vas faire que si quelqu'un clique sur ce bouton, l'√©l√©ment HTML portant l'Id navbarHeader perde sa classe collapse. Une fois que √ßa, √ßa marche, fait que si on clique √† nouveau dessus, la classe collapse soit rajout√©e √† nouveau √† l'√©l√©ment portant l'Id navbarHeader
{
  let toggler = document.getElementsByClassName("navbar-toggler")
  let onTogglerClick = function() {
    navbarHeader.classList.toggle("collapse")
  }
  toggler[0].addEventListener("click", onTogglerClick);
}
// Fonctionnalit√© 3 :
// √Ä pr√©sent, on va faire cela : si on clique sur le bouton "Edit" de la premi√®re card, le texte de la card va se mettre en rouge de fa√ßon irr√©versible (sauf si on recharge la page). √Ä toi de jouer !
{
  let edit = document.getElementsByClassName("btn btn-sm btn-outline-secondary")
  let onEditClick = function() {
    document.getElementsByClassName("card-text")[0].style.color = "red";
  }
  edit[0].addEventListener("click", onEditClick);
}
// Fonctionnalit√© 4 :
// On va faire quelque chose de similaire √† la fonctionnalit√© 3 mais un peu plus complexe : si on clique sur le bouton "Edit" de la deuxi√®me card, le texte de la card va se mettre en vert. Si on re-clique dessus, il redevient comme avant ! Tu l'as compris, il va falloir que tu cherches comment faire un "toggle" sur le style du texte. C'est plus compliqu√© que sur une classe. 
{
  let greenColor = false
  let edit = document.getElementsByClassName("btn btn-sm btn-outline-secondary")
  let onEditClick = function() {
    if (greenColor === false){
      document.getElementsByClassName("card-text")[1].style.color = "green";
      greenColor = true
    } else {
      document.getElementsByClassName("card-text")[1].style.color = "black";
      greenColor = false
    }
  }
  edit[1].addEventListener("click", onEditClick);
}
// Fonctionnalit√© 5 :
// Pour le fun, on va impl√©menter une fonctionnalit√© √† la sauce ‚ò¢"nucl√©aire"ü§Ø. Et comme elle est un peu dangereuse, on va la cacher‚Ä¶ Voici comment elle doit marcher : si un utilisateur double clique sur la navbar en haut, tout Bootstrap dispara√Æt et la page s'affiche comme si on avait oubli√© de mettre le CDN qui la relie au fichier CSS. Si possible, rends cette fonctionnalit√© r√©versible (un nouveau double-clic fait tout revenir √† la normale).
{
  let isDisabled = false
  let navbar = document.getElementsByTagName("header")
  let onNavbarClick = function() {
    if (isDisabled === false){
      document.getElementsByTagName("link")[0].href = '';
      isDisabled = true;
    } else {
      document.getElementsByTagName("link")[0].href = 'https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css';
      isDisabled = false;
    }
  }
  navbar[0].addEventListener("dblclick", onNavbarClick); 
}
// Fonctionnalit√© 6 :
// T'as d√©j√† impl√©ment√© 5 fonctionnalit√©s d'interaction ! C'est top ! On va commencer √† corser les choses.
// La fonctionnalit√© sera la suivante : si un utilisateur passe sa souris sur le bouton "View" d'une card (n'importe laquelle), celle-ci va se r√©duire. Cela veut dire que le texte dispara√Æt, l'image n'appara√Ætra qu'√† 20 % de sa taille d'origine et les boutons "Edit" / "View" restent visibles. Cette fonction sera r√©versible : s'il repasse sa souris, la card redevient normale !
{
  let card = document.getElementsByClassName("card mb-4 box-shadow")

  for (let num = 0; num < card.length; num++) {
    let image = card[num].getElementsByClassName("card-img-top")[0];
    let text = card[num].getElementsByClassName("card-text")[0];
    let view = card[num].getElementsByClassName("btn btn-sm btn-success")[0];

    function reduce() {
      if(text.style.display == "") {
        image.style.width = "20%";
        text.style.display = "none";
      } else {
        image.style.width = "100%"; 
        text.style.display = "";
      }
    }

    view.addEventListener("mouseover", reduce);
  }
}
// Fonctionnalit√© 7 :
// Allez on va rajouter un peu de WTF dans la page : si un utilisateur clique sur le bouton gris ==>, la derni√®re card (en bas √† droite) va passer en premier (en haut √† gauche). On va pouvoir faire tourner les cards !
{
  let rightButton = document.getElementsByClassName("btn btn-secondary my-2")[0];
  let cards = document.getElementsByClassName("row")[1];
  let cardsMaxId = document.getElementsByClassName("card mb-4 box-shadow").length - 1;

  function move_forward() {
    cards.insertBefore(cards.children[cardsMaxId], cards.children[0]);
  }

  rightButton.addEventListener("click", move_forward)
}
// Fonctionnalit√© 8 :
// √âvidemment tu t'y attendais : on va faire tourner les card dans l'autre sens aussi. Donc si un utilisateur clique sur le bouton bleu <==, la premi√®re card devra passer en dernier. √Ä premi√®re vue, tu te dis que si tu as r√©ussi √† faire la fonctionnalit√© pr√©c√©dente, celle-ci c'est du gateau... sauf qu'il y a quelques pi√®ges. üòà 
{
  let leftButton = document.getElementsByClassName("btn btn-primary my-2")[0];
  let cards = document.getElementsByClassName("row")[1];
  let cardsMaxId = document.getElementsByClassName("card mb-4 box-shadow").length - 1;

  function move_backward() {
    leftButton.removeAttribute("href");
    cards.insertBefore(cards.children[0], cards.children[cardsMaxId].nextSibling);
  }

  leftButton.addEventListener("click", move_backward);
}
// Fonctionnalit√© 9 :
// Bon si t'es arriv√© jusque-l√†, c'est que t'as besoin d'un peu de challenge. Du coup je t'ai concoct√© une fonctionnalit√© de derri√®re les fagots, sp√©cialement con√ßue pour les moussaillons pas piqu√©s des hannetons (this sentence is brought to you by www.vieilles-expressions.fr). Voici ce qu'elle va devoir faire :
//   La fonctionnalit√© se d√©clenchera si le logo de la page (JS & Events) est s√©lectionn√© et qu'on appuie sur une touche sp√©cifique du clavier.
//   Si l'utilisateur presse la touche "a", l'ensemble de la page va √™tre condens√© sur 4 colonnes Bootstrap √† gauche de l'√©cran.
//   Si l'utilisateur presse la touche "y", l'ensemble de la page va √™tre condens√© sur 4 colonnes Bootstrap au milieu de l'√©cran.
//   Si l'utilisateur presse la touche "p", l'ensemble de la page va √™tre condens√© sur 4 colonnes Bootstrap √† droite de l'√©cran.
//   Si l'utilisateur presse la touche "b", tout redevient normal.
{
  
}